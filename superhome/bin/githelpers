#!/bin/zsh

#=============#
# Git Helpers #
#=============#

function sbranch() {
    git switch $(git branch | fzf)
}

function sftd() {
    git ls-files -m | fzf --multi --prompt='Diff> ' | xargs -r bat --diff
}

function sfta() {
    git ls-files -m | fzf --multi --prompt='Add> ' | xargs -r git add
}

function sftr() {
    git ls-files -m | fzf --multi --prompt='Restore> ' | xargs -r git restore
}

function ssftr() {
    git --no-pager diff --name-only --staged | fzf --multi --prompt='Restore staged> ' | xargs -r git restore --staged
}

function grepmod() {
    grep -n $1 $(git ls-files -m)
}

function grepdiff() {
    # below works but is overly complicated
    # export GREPTERM=${1}
    # git ls-files -m | parallel 'echo {}; git --no-pager diff -- {} | grep "[-+].*$VAR"'
    # unset GREPTERM

    git ls-files -m | xargs -I {} -n1 sh -c "echo {} ; git --no-pager diff -- {} | grep --color=auto -n '[-+].*$1'"
}

function gdown() {
    git checkout HEAD^
}

function gup() {
    git log --reverse --pretty=%H $1 | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
}

function bdiff() {
    git diff --name-only --diff-filter=d | xargs bat --diff
}

function sbs() {
    local config="$HOME/.gitconfig"

    # Check for [delta] section
    if ! grep -q '^\[delta\]' "$config"; then
        echo "Error: [delta] section not found in $config" >&2
        return 1
    fi

    # Find start and end of [delta] section
    local start_line end_line
    start_line=$(grep -n '^\[delta\]' "$config" | cut -d: -f1)
    end_line=$(grep -n '^\[' "$config" | awk -F: -v s="$start_line" '$1 > s {print $1; exit}')
    [[ -z "$end_line" ]] && end_line=$(wc -l < "$config")

    # Look for side-by-side line in the section
    local side_line rel_line abs_line
    side_line=$(sed -n "${start_line},${end_line}p" "$config" | grep -n '^\s*side-by-side\s*=')
    if [[ -z "$side_line" ]]; then
        echo "Error: side-by-side line not found in [delta] section of $config" >&2
        return 1
    fi

    rel_line=$(echo "$side_line" | cut -d: -f1)
    abs_line=$(( start_line + rel_line - 1 ))

    # Flip true <-> false
    if echo "$side_line" | grep -q '= *true'; then
        sed -i '' "${abs_line}s/true/false/" "$config"
        echo "Set side-by-side = false"
    else
        sed -i '' "${abs_line}s/false/true/" "$config"
        echo "Set side-by-side = true"
    fi
}

function aliases() {
    git config --get-regexp '^alias\.' | sed -e "s/^alias\.//" -e "s/\ /\ =\ /"
}

function usage() {
    echo "Usage: githelpers <cmd> [<args>]"
    echo "Available commands:"
    echo "\tsbranch - select branch with fuzzy find"
    echo "\tsftd - select files to diff: fuzzy find and select modified files and show git diff"
    echo "\tsfta - select files to add: fuzzy find and select modified files and add to stage"
    echo "\tsftr - select unstaged files to restore: fuzzy find and select among unstaged files to restore them"
    echo "\tssftr - select staged files to restore: fuzzy find and select among staged files to restore them"
    echo "\tgrepmod <expr> - grep through entire contents of modified files tracked by git"
    echo "\tgrepdiff <expr> - grep through just the diffs of modified files tracked by git"
    echo "\tgdown - go down in git history (back to parent)"
    echo "\tgup - go up in git history (up to child, assumes one child)"
    echo "\tbdiff - syntax highlight git diffs with bat"
    echo "\tsbs - toggle Delta's side-by-side feature in gitconfig"
    echo "\taliases - list all git aliases"
}

case "$1" in
    sbranch)
        sbranch
        ;;
    sftd)
        sftd
        ;;
    sfta)
        sfta
        ;;
    sftr)
        sftr
        ;;
    ssftr)
        ssftr
        ;;
    grepmod)
        grepmod "$2"
        ;;
    grepdiff)
        grepdiff "$2"
        ;;
    gdown)
        gdown
        ;;
    gup)
        gup
        ;;
    bdiff)
        bdiff
        ;;
    sbs)
        sbs
        ;;
    aliases)
        aliases
        ;;
    help)
        usage
        ;;
    *)
        echo "Invalid command: $@"
        usage
        exit 1
        ;;
esac

