# when doing rm folder/* or `rm *` zsh asks "sure you want to delete all the files in ... [yn]?"
# even if -f set
# this disables that
# https://unix.stackexchange.com/questions/135084/double-rm-verification-in-zsh
setopt rm_star_silent


PATH="$SUPERHOME/bin:$PATH"
# poetry, virtualenv, and others
PATH="$HOME/.local/bin:$PATH"


# https://superuser.com/questions/1563825/is-there-a-zsh-equivalent-to-the-bash-help-builtin
if [[ "$(whence -w run-help | cut -d : -f 2 | tr -d ' ')" == "alias" ]]; then
    unalias run-help
fi
autoload run-help
HELPDIR=/usr/share/zsh/"${ZSH_VERSION}"/help
alias help=run-help


# NOTE: Can do the following
# `0` - path to this file
# `A` - abs path, resolving symlinks, etc
# `h` - head of path, strip out this filename from path, leaving just dir
# ${0:A:h}/path/to/some_file_relative_to_here.ext

# zsh_unplugged
source $SUPERHOME/config/zsh/unplugged.zsh
# omz jump plugin extension
source $SUPERHOME/config/zsh/jump.zsh
# prompt
export STARSHIP_CONFIG="$SUPERHOME/config/starship/starship.toml"
export STARSHIP_TRANSIENT_CONFIG="$SUPERHOME/config/starship/starship.toml"
eval "$(starship init zsh)"
source $SUPERHOME/config/zsh/transient_prompt.zsh
# cd into alias folder
source $SUPERHOME/config/zsh/aliasPath.zsh


# -m flag for multi-select, TAB/SHIFT-TAB to mark items
export FZF_DEFAULT_OPS="-m"
#export FZF_COMPLETION_OPTS='--border --info=inline'
# ignore node_modules and .git
# https://stackoverflow.com/questions/61865932/how-to-get-fzf-vim-ignore-node-modules-and-git-folders
export FZF_DEFAULT_COMMAND='fd -H --no-require-git .'

# set neovim as main editor
export EDITOR="nvim"


function yadmc() {
  # Check if yadm is installed
  if ! command -v yadm &>/dev/null; then
    echo "Error: yadm is not installed or not in PATH." >&2
    return 1
  fi

  yadm status

  # Ensure a commit message is provided
  if [[ -z "$1" ]]; then
    echo "Usage: ydm <commit-message> [nop]"
    echo "  commit-message: The message for the commit."
    echo "  nop (optional): If provided, prevents 'yadm push'."
    return 1
  fi

  # Add and commit changes
  yadm add -u
  yadm commit -m "$1"

  # Push unless 'nop' is passed
  if [[ "$2" != "nop" ]]; then
    yadm push
  fi

  yadm status
}

# yazi optional deps used:
#   exiftools, nerd-fonts, ffmpeg, sevenzip, jq, poppler, fd, rg, fzf, imagemagick
# not used:
#   zoxide

# yazi - set config home to superhome
#export YAZI_CONFIG_HOME="$(pwd)/yazi"
export YAZI_CONFIG_HOME="$HOME/superhome/config/yazi"

# yazi - cd on exit (q), or don't cd (Q)
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	command rm -f -- "$tmp"
}

function filengrok() {
  ngrok http --url=optimal-titmouse-hopefully.ngrok-free.app --response-header-add="Access-Control-Allow-Origin:*" "file://$1"
}


alias rm="rm -iv"
alias mv="mv -iv"
alias cp="cp -riv"
alias mkdir="mkdir -vp"

alias diffc="diff --color=always"
alias lessc="less -r"
alias subl="sublime_text"

#alias myip="curl http://ipecho.net/plain; echo"
alias myip="curl -s https://ipv4.icanhazip.com/"
alias myip6="curl -s https://ipv6.icanhazip.com/"
alias myipp="utilhelpers myip"
# show all env variables - must be alias not function
alias envv="( setopt posixbuiltin; set; ) | less"
alias dostat="utilhelpers dostat"

alias pltoxml="utilhelpers pltoxml"
alias xmltopl="utilhelpers xmltopl"

alias surround="utilhelpers surround"

# https://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/
alias plistbuddy="/usr/libexec/PlistBuddy"

# syntax highlight man pages with bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# use eza instead of ls
alias l="eza --all --icons=auto --classify=auto"
alias ll="eza --long --all --git --header --icons=auto --classify=auto"
alias t="eza --oneline --all --icons=auto --classify=auto"
alias tt="eza --tree --all --classify=auto --icons=auto --level=2"
alias ttt="eza --tree --all --classify=auto --icons=auto --level=3"
alias tttt="eza --tree --all --classify=auto --icons=auto --level=4"

alias hex="hexyl"

# basic preview with bat
alias fzfpview="utilhelpers fzfpreview"
# use opener; takes opt arg; depth 1
alias fzfp="utilhelpers fzfp"
# use opener; no arg; inf depth
alias fzfpp="utilhelpers fzfpp"
# use opener; no arg; inf depth; pipe res into ll
alias fzfppls="utilhelpers fzfppls"

alias npmglobals="utilhelpers npmglobals"

alias pypi="utilhelpers pypi"
alias pipcompat="utilhelpers pipcompat"

alias dockersize="utilhelpers dockersize"

alias nv="nvim"
# node with vim mode (no autocomplete)
# https://github.com/nodejs/node/issues/5608
# https://github.com/nodejs/node/issues/5608#issuecomment-441785908
if [ $(command -v rlwrap) ] ; then
  alias vnode='NODE_NO_READLINE=1 rlwrap node'
fi

# NOTE: just use pgrep instead
# leaving here until you remember
alias psa="ps -A | grep -v grep"

alias pycolors="pycolors.py"
alias pyfansi="pyfansi.py"
alias pycodepoints="pycodepoints.py"


# WARN: below should probably stay at bottom, in the order that it is
# if moving things around, make sure to test breakage

# ensure completions configured before compinit
# https://github.com/zsh-users/zsh-completions#manual-installation
autoload -Uz compinit && compinit
compdef _completemarks jump
compdef _completemarks unmark
compdef _completemarks fj

# zsh_unplugged
repos=(
  # must be loaded after compinit, but before plugins which wrap widgets (e.g. fast-syntax-highlighting)
  'Aloxaf/fzf-tab'

  'jeffreytse/zsh-vi-mode'

  'zdharma-continuum/fast-syntax-highlighting'
)
# load the plugins
plugin-load $repos

# WARN: below fzf sourcing must come after plugins loaded
#
# this is for the zsh-vi-mode plugin I use
# `${var+x}` is a paramater expansion, nothing if var unset, string "x" otherwise
# len("x") is not zero, and len("") is zero, so if `ZVM_CONFIG_FUNC` not set, then, else
if [ -z ${ZVM_CONFIG_FUNC+x} ]
# if zsh-vi-mode there was NOT enabled
# then load fzf directly
then
    # fzf - enable auto completing and key bindings
    source <(fzf --zsh)
else
    # zsh-vi-mode loaded
    # which would normally override key bindings from other places
    # we re-enable fzf keybindings using below, by wrapping it in a zsh-vi-mode hook
    # https://github.com/jeffreytse/zsh-vi-mode?tab=readme-ov-file#execute-extra-commands
    zvm_after_init_commands+=('source <(fzf --zsh)')
fi

# late key bidnings - runs right before you start typing at the prompt
function _late_bindings() {
  # key binds for "jump" plugin (./zsh/jump.zsh) loaded above
  bindkey "^G" _mark_expansion
  bindkey "^H" _fuzzy_mark_expansion
}
autoload -Uz add-zle-hook-widget
add-zle-hook-widget zle-line-init _late_bindings
